<% content_for :header_tags do
	stylesheet_link_tag('issue_history_tabs.css', :plugin => :redmine_issue_detailed_tabs_time)
end
    
tabs = [];
tabsContainContent = [];
validTabs = ['history_comments','history_all','history_activity','history_private','tabtime_time']
reply_links = authorize_for('issues', 'edit')
c = ''

# Get a list of all journals and time entires to iterate through.  This ensures
# that the bookmarks will be consistent for all users regardless of permission
# level.  Combine the list for journals and time entries and sort by date. This
# intersperses the time entires and jounals together in chronological order.
entries = @issue.journals + @issue.time_entries
entries.sort! { |x,y| x.created_on <=> y.created_on }
index = 1

if !entries.empty?
	# we will first go trough all the items once so that we can determine what
	# tabs are available for us to select default tab or tab in url
	tabs.push({:label => :label_history_tab_all, :name => 'history_all'}) if User.current.allowed_to?(:view_all,@project,:global => true)
	for entry in entries
		if entry.is_a?(Journal) && journals.include?(entry) 
			tabs.push({:label => :label_history_tab_comments, :name => 'history_comments'}) if entry.notes? && User.current.allowed_to?(:view_comments,@project,:global => true)
			tabs.push({:label => :label_history_tab_private, :name => 'history_private'} ) if entry.private_notes?
			tabs.push( {:label => :label_history_tab_activity, :name => 'history_activity'}) if (entry.details.any?) && User.current.allowed_to?(:view_activity,@project,:global => true)
		elsif entry.is_a?(TimeEntry) && User.current.allowed_to?(:view_time_entries, @project) 
			tabs.push( {:label => :label_history_tab_time, :name => 'tabtime_time'})		
		end
	end	
	# now we will try to see what tab will be the selected one
	tabs.each { |tab| tabsContainContent.push(tab[:name])}

	if validTabs.include?(params[:tab]) && tabsContainContent.include?(params[:tab]) 
		selected_tab = params[:tab]
	end
	selected_tab ||= validTabs.each.find{ |v| tabsContainContent.include? v }
	
	for entry in entries
		if entry.is_a?(Journal) && journals.include?(entry) # only show if visible
			journal = entry
			# this is a check to ensure that the journal entry should be visible for the user.
		  		if (((journal.details.any?) && User.current.allowed_to?(:view_activity,@project,:global => true)) || journal.private_notes? || (journal.notes? && User.current.allowed_to?(:view_comments,@project,:global => true)))
		  			c << "<div id='change-#{journal.id}' class='#{journal.css_classes}'>"
				  		c << "<h4>"
					  		c << link_to("##{index}", {:anchor => "note-#{index}"}, :class => "journal-link" )
					  		c << avatar(journal.user, :size => "24")
					  		c << content_tag('a', '', :name => "note-#{journal.indice}")
					  		c << authoring(journal.created_on, journal.user, :label => :label_updated_time_by)
				  		c << "</h4>"
				  	
				  		if (journal.details.any?) && User.current.allowed_to?(:view_activity,@project,:global => true)
				  			c << "<ul class='details'>"
				  				details_to_strings(journal.details).each do |string|
				  				c << "<li>" + string + "</li>"
				  				end
				  			c << "</ul>"
				  		end
				  		if User.current.allowed_to?(:view_comments,@project,:global => true) || journal.private_notes?
				  	 		c << render_notes(issue, journal, :reply_links => reply_links) unless journal.notes.blank?
				  	 	end
		  			c << "</div>" 
		  		end
		  		c <<  call_hook(:view_issues_history_journal_bottom, { :journal => journal })
		  		
		elsif entry.is_a?(TimeEntry)
		  timelog = entry
		  if User.current.allowed_to?(:view_time_entries, @project) 
			c << "<div id='time-#{timelog.id}' class='journal has-time'>"
				c << "<h4>"
					c << link_to("##{index}", {:anchor => "note-#{index}"}, :class => "journal-link")
					c << avatar(timelog.user, :size => "24")
					c << content_tag('a', '', :name => "note-#{index}")
					c << authoring(timelog.created_on, timelog.user, :label => :label_history_time_logged_by) 
				c << '</h4>'
				c << '<ul class="details">'
					c << '<li><strong>'+ l(:label_history_time_spent) + ":</strong> " + html_hours("%.2f" % timelog.hours) + " " + l(:label_history_time_hours_on) + " " + h(timelog.activity) + '</li>'
					unless timelog.comments.nil? || timelog.comments.empty?			
						c << '<li><blockquote><p>' + timelog.comments + '</p></blockquote></li>'
					end
				c << '</ul>'
			c << '</div>'
		  end
		end
		index += 1
	end #for entries 
	tabs = tabs.uniq
	%>
	
	<div class="tabs">
		<ul>
			<% tabs.each do |tab| -%>
			<li>
				<%= link_to l(tab[:label]), { :tab => tab[:name] },
				:id => "tab-#{tab[:name]}",
				:class => ((tab[:name] != selected_tab ? 'tab-history' : 'tab-history selected')),
				:onclick => "return false;"%>
			</li>
			<% end -%>
		</ul>
	</div>
	<%= c.html_safe %>
<% end%>
<% heads_for_wiki_formatter if User.current.allowed_to?(:edit_issue_notes, issue.project) || User.current.allowed_to?(:edit_own_issue_notes, issue.project) %>

